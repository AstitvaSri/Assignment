#lang racket
(require rackunit)
(require "main.rkt")
(check-equal? (vector-sum #()) 0 "test 1")
(check-equal? (vector-sum #(1 2 3)) 6 "test 2")
(check-equal? (vector-sum #(-1 2 3)) 4 "test 3")
(check-equal? (list-sum '()) 0 "test 1")
(check-equal? (list-sum '(1 2)) 3 "test 2")
(check-equal? (list-sum '(1 2 8 4)) 15 "test 3")
(check-equal? (list-length '()) 0 "test 1")
(check-equal? (list-length '(1 2 a)) 3 "test 2")
(check-equal? (list-length '(1 2 (1 2 3))) 3 "test 3")
(check-equal? (list-length '((1 2) (3 4) (5 6))) 3 "test 4")
(check-equal? (member? '() 'a) #f "test 1")
(check-equal? (member? '(a b c) 'a) #t "test 2")
(check-equal? (member? '("a" "b" "c") 'a) #f "test 3")
(check-equal? (member? '(1 2 3 (5 6)) '(5 6)) #t "test 4")
(check-equal? (map-sqr '(1 2 3 4)) '(1 4 9 16) "test-1")
(check-equal? (map-sqr '(1 2/3 3.0 3+4i)) '(1 4/9 9.0 -7+24i) "test 2")
(check-equal? (map-sqr '()) '() "test 3")

#lang racket
(require rackunit)
(require racket/list)
(require "main.rkt")
(check-equal? (split-list '() 3) '(() ()) "test 1")
(check-equal? (split-list '(1 2 3 4) 5) '((1 2 3 4) ()) "test 2")
(check-equal? (split-list '(3 1 2 6 5 7 5) 5) '((3 1 2 5 5) (6 7)) "test 3")
(check-equal? (split-list '(3 1 2 6 5 7 5) 0) '(() (3 1 2 6 5 7 5)) "test 4")
(check-equal? (flatten-list '()) '() "test 1")
(check-equal? (flatten-list '((1) () (2))) '(1 2) "test 2")
(check-equal? (flatten-list '((1 2) ())) '(1 2) "test 3")
(check-equal? (flatten-list '(() (1) (3 4))) '(1 3 4) "test 4")
(check-equal? (flatten-list '(1 (2 (3 4) 5) 6)) '(1 2 3 4 5 6) "test 5")
  (check-equal? (map* even? '(2 (4 3) ())) '(#t (#t #f) ()) "test 1")
  (check-equal? (map* add1 '((1 2) 3 (4 5) (6 7))) '((2 3) 4 (5 6) (7 8)) "test 2")
  (check-equal? (map* boolean? '(1 #t #f -2 0)) '(#f #t #t #f #f) "test 3")
  (define (binary-and x y)
    (and x y))

  (check-equal? (reduce* binary-and #t '((#t #t) (#t #t) #f)) #f "test 1")
  (check-equal? (reduce* binary-and #t '(#t (#t #t))) #t "test 2")
  (check-equal? (reduce* + 0 '(1 (2 3) (4 5))) 15 "test 3")
  (check-equal? (reduce* * 1 '((3 5) (2))) 30 "test 4")
